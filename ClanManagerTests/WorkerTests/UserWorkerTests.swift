//
//  UserWorkerTests.swift
//  ClanManager
//
//  Created by Jeffrey Wu on 2017-01-13.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import ClanManager
import XCTest

class UserWorkerTests: XCTestCase
{
    // MARK: - Subject under test

    var userWorker: UserWorker!

    // MARK: - Test lifecycle

    override func setUp()
    {
        super.setUp()
        setupUserWorker()
    }

    // MARK: - Test setup

    func setupUserWorker()
    {
        userWorker = UserWorker(userStore: UserMemStoreSpy())
    }

    // MARK: - Tests

    func testFetchUserShouldMakeRequestToStore()
    {
        // Given
        let storeSpy = userWorker.userStore as! UserMemStoreSpy

        // When
        userWorker.fetchUser(id: "")
        { _ in
        }

        // Then
        XCTAssertTrue(storeSpy.fetchUserCalled, "Should make a request to the store to fetch the user")
    }

    func testFetchUserReturnsWithAUser()
    {
        // Given
        let storeSpy = userWorker.userStore as! UserMemStoreSpy

        // When
        let expect = expectation(description: "Wait for fetch user to return")
        userWorker.fetchUser(id: "")
        { _ in
            expect.fulfill()
        }

        // Then
        waitForExpectations(timeout: Double(storeSpy.asyncDelaySeconds) + 0.1)
        { _ in
            XCTAssert(true, "Calling fetchUser with handler should get the completion handler called")
        }
    }
}

fileprivate class UserMemStoreSpy: UserMemStore
{
    var fetchUserCalled = false
    var asyncDelaySeconds = 1

    override func fetchUser(id _: String, completionHandler: @escaping (_: User) -> Void)
    {
        fetchUserCalled = true
        let oneSecondAfter = DispatchTime.now() + DispatchTimeInterval.seconds(asyncDelaySeconds)
        DispatchQueue.main.asyncAfter(deadline: oneSecondAfter, execute: {
            completionHandler(User())
        })
    }
}
