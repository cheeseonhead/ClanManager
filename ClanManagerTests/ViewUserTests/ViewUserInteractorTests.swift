//
//  ViewUserInteractorTests.swift
//  ClanManager
//
//  Created by Jeffrey Wu on 2017-01-13.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import ClanManager
import XCTest

class ViewUserInteractorTests: XCTestCase
{
    // MARK: - Subject under test

    var interactor: ViewUserInteractor!

    // MARK: - Test lifecycle

    override func setUp()
    {
        super.setUp()
        setupViewUserInteractor()
    }

    // MARK: - Test setup

    func setupViewUserInteractor()
    {
        interactor = ViewUserInteractor()
    }

    // MARK: - Tests

    func testFetchUserTriggersPresentUser()
    {
        // Given
        let outputSpy = ViewUserInteractorSpy()
        interactor.output = outputSpy
        let workerSpy = UserWorkerSpy(userStore: UserMemStore())
        interactor.worker = workerSpy

        // When
        interactor.fetchUser(id: "", request: ViewUser.FetchUser.Request())

        // Then
        XCTAssertTrue(workerSpy.fetchUserCalled, "Should call the worker to fetch the user.")
        XCTAssertTrue(outputSpy.presentUserCalled, "Present User should be called on the output.")
    }

    func testFetchUserConstructsCorrectResponse()
    {
        let workerSpy = UserWorkerSpy(userStore: UserMemStore())
        let outputSpy = ViewUserInteractorSpy()
        interactor.output = outputSpy
        interactor.worker = workerSpy

        workerSpy.fakeResultUser = User(id: "qwerty", firstName: "Allen", lastName: "Chang", townHallLevel: 5)

        let expected = ViewUser.FetchUser.Response(firstName: "Allen", lastName: "Chang", townHallLevel: 5)

        interactor.fetchUser(id: "", request: ViewUser.FetchUser.Request())

        XCTAssertEqual(expected, outputSpy.resultResponse!, "Returned user should be the same as given by the worker")
    }
}

fileprivate class ViewUserInteractorSpy: ViewUserInteractorOutput
{
    var presentUserCalled = false
    var resultResponse: ViewUser.FetchUser.Response!

    func presentUser(response: ViewUser.FetchUser.Response)
    {
        presentUserCalled = true
        resultResponse = response
    }
}

fileprivate class UserWorkerSpy: UserWorker
{
    var fetchUserCalled = false
    var fakeResultUser: User!

    override func fetchUser(id _: String, completionHandler: @escaping (_: User) -> Void)
    {
        fetchUserCalled = true
        completionHandler(fakeResultUser)
    }
}
