//
//  ViewUserPresenterTests.swift
//  ClanManager
//
//  Created by Jeffrey Wu on 2017-01-13.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Quick
@testable import ClanManager
import Nimble

class ViewUserPresenterTests: QuickSpec
{
    override func spec()
    {
        var presenter: ViewUserPresenter!
        var outputSpy: OutputSpy!

        beforeEach
        {
            presenter = ViewUserPresenter()
            outputSpy = OutputSpy()
            presenter.output = outputSpy
        }

        describe("Fetch User")
        {
            var defaultResponse = ViewUser.FetchUser.Response()

            describe("Name")
            {
                it("should be combination of first name and last name")
                {
                    defaultResponse.firstName = "John"
                    defaultResponse.lastName = "Cena"

                    presenter.presentUser(response: defaultResponse)

                    expect(outputSpy.userViewModelGiven.name).to(equal("John Cena"))
                }
            }

            describe("Town Hall Description")
            {
                it("should use the town hall level")
                {
                    defaultResponse.townHallLevel = 5

                    presenter.presentUser(response: defaultResponse)

                    var expected = String.localizedStringWithFormat(NSLocalizedString("TownHall_Level_Description", comment: ""), defaultResponse.townHallLevel)
                    expect(outputSpy.userViewModelGiven.townHallDescription).to(equal(expected))
                }
            }
        }
    }
}

fileprivate class OutputSpy: ViewUserPresenterOutput
{
    var displayUserCalled = false
    var userViewModelGiven: ViewUser.FetchUser.ViewModel!

    func displayUser(viewModel: ViewUser.FetchUser.ViewModel)
    {
        displayUserCalled = true
        userViewModelGiven = viewModel
    }
}
