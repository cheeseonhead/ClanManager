//
//  EditSettingsInteractor.swift
//  ClanManager
//
//  Created by Jeffrey Wu on 2017-01-17.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol EditSettingsInteractorInput
{
    func fetchSettings(request: EditSettings.FetchSettings.Request)
    func storeSettings(request: EditSettings.StoreSettings.Request)
}

protocol EditSettingsInteractorOutput
{
    func presentSettings(response: EditSettings.FetchSettings.Response)
    func presentStoreSettingsResult(response: EditSettings.StoreSettings.Response)
}

protocol EditSettingsDataSource
{

}

protocol EditSettingsDataDestination
{

}

class EditSettingsInteractor: EditSettingsInteractorInput, EditSettingsDataSource, EditSettingsDataDestination
{

    var output: EditSettingsInteractorOutput!
    var sessionWorker: SessionWorker! = SessionWorker(store: SessionMemStore.sharedInstance)

    // MARK: Business logic

    func fetchSettings(request _: EditSettings.FetchSettings.Request)
    {
        sessionWorker.fetchSettings
        { settings in
            guard let settings = settings else
            {
                self.output.presentSettings(response: EditSettings.FetchSettings.Response())
                return
            }
            let response = EditSettings.FetchSettings.Response(currentPlayerTag: settings.currentPlayerTag)
            self.output.presentSettings(response: response)
        }
    }

    func storeSettings(request: EditSettings.StoreSettings.Request)
    {
        let newSettings = Settings(currentPlayerTag: request.playerTag)
        sessionWorker.storeSettings(settingsToStore: newSettings)
        { result in
            var response = EditSettings.StoreSettings.Response()

            response.success = result.success
            switch result.playerTagValidation {
            case .valid:
                response.playerTagValidation = .valid
                break
            case .errorEmpty:
                response.playerTagValidation = .empty
                break
            case .errorContainsSpaces:
                response.playerTagValidation = .containsSpaces
                break
            }

            self.output.presentStoreSettingsResult(response: response)
        }
    }
}

extension SessionMemStore: SessionStoreProtocol {}
