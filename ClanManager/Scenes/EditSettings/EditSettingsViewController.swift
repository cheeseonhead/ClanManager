//
//  EditSettingsViewController.swift
//  ClanManager
//
//  Created by Jeffrey Wu on 2017-01-17.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//

import UIKit

protocol EditSettingsViewControllerInput
{
    func displaySettings(viewModel: EditSettings.FetchSettings.ViewModel)
}

protocol EditSettingsViewControllerOutput
{
    func fetchSettings(request: EditSettings.FetchSettings.Request)
}

class EditSettingsViewController: UIViewController, EditSettingsViewControllerInput
{

    var output: EditSettingsViewControllerOutput!
    var router: EditSettingsRouter!

    @IBOutlet weak var playerTagTextField: UITextField!
    @IBOutlet weak var saveButton: UIButton!
    @IBOutlet weak var scrollView: UIScrollView!

    // MARK: Object lifecycle

    override func awakeFromNib()
    {
        super.awakeFromNib()
        EditSettingsConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchSettingsOnLoad()

        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWasShown(notification:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
    }

    func keyboardWasShown(notification: NSNotification)
    {
        var info = notification.userInfo!
        let keyboardSize = (info[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue.size
        let contentInset = UIEdgeInsets(top: 0, left: 0, bottom: (keyboardSize?.height)!, right: 0)

        self.scrollView.contentInset = contentInset
    }

    // MARK: Event handling

    func fetchSettingsOnLoad()
    {
        output.fetchSettings(request: EditSettings.FetchSettings.Request())
    }

    @IBAction func saveButtonPressed(_: UIButton)
    {
    }

    // MARK: Display logic

    func displaySettings(viewModel: EditSettings.FetchSettings.ViewModel)
    {
        self.playerTagTextField.text = viewModel.currentPlayerTag
    }

    override var prefersStatusBarHidden: Bool
    {
        return true
    }
}
